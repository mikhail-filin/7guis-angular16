[
  {
    "id": "counter",
    "title": "Counter",
    "challenge": "Understanding the basic ideas of a language/toolkit.",
    "tasks": [
      "Build a frame containing a label or read-only textfield and a button.",
      "Initially, the value in the textfield is 0.",
      "Each click of the button increases the value in the textfield by 1."
    ],
    "description": [
      "Counter serves as a gentle introduction to the basics of the language, paradigm and toolkit for one of the simplest GUI applications imaginable. Thus, Counter reveals the required scaffolding and how the very basic features work together to build a GUI application. A good solution will have almost no scaffolding."
    ]
  },
  {
    "id": "temperature-converter",
    "title": "Temperature Converter",
    "challenge": "Bidirectional data flow, user-provided text input.",
    "tasks": [
      "Build a frame containing two textfields representing the temperature in Celsius and Fahrenheit.",
      "Initially, both textfields are empty",
      "When the user enters a numerical value into any textfield, the corresponding value in the other one is automatically updated.",
      "When the user enters a non-numerical string into a textfield, the value in the other one is not updated.",
      "The formula for converting a temperature in Celsius into a temperature in Fahrenheit: C = (F - 32) * (5/9).",
      "The formula for converting a temperature in Fahrenheit into a temperature in Celsius: F = C * (9/5) + 32."
    ],
    "description": [
      "Temperature Converter increases the complexity of Counter by having bidirectional data flow between the Celsius and Fahrenheit inputs and the need to check the user input for validity. A good solution will make the bidirectional dependency very clear with minimal boilerplate code.",
      "Temperature Converter is inspired by the <a href='https://www.artima.com/pins1ed/gui-programming.html#32.4' target='blank'>Celsius/Fahrenheit converter</a> from the book Programming in Scala. It is such a widespread example—sometimes also in the form of a currency converter—that one could give a thousand references. The same is true for the Counter task"
    ]
  },
  {
    "id": "flight-booker",
    "title": "Flight Booker",
    "challenge": "Constraints.",
    "tasks": [
      "Build a frame containing a combobox with the two options “one-way flight” and “return flight”, two textfields representing the start and return date, and a button for submitting the selected flight.",
      "The return field is enabled if the combobox’s value is “return flight”.",
      "When the combobox has the value “return flight” and return field's date is strictly before departure field's then button is disabled.",
      "When a non-disabled textfield has an ill-formatted date then textfield is colored red and the button is disabled.",
      "When clicking the button a message is displayed informing the user of his selection.",
      "Initially, the combobox has the value “one-way flight” and both textfields have the same (arbitrary) date."
    ],
    "description": [
      "The focus of Flight Booker lies on modelling constraints between widgets on the one hand and modelling constraints within a widget on the other hand. Such constraints are very common in everyday interactions with GUI applications. A good solution for Flight Booker will make the constraints clear, succinct and explicit in the source code and not hidden behind a lot of scaffolding.",
      "Flight Booker is directly inspired by the <a href='https://blog.reactiveprogramming.org/?p=21' target='blank'>Flight Booking Java example in Sodium</a> with the simplification of using textfields for date input instead of specialized date picking widgets as the focus of Flight Booker is not on specialized/custom widgets."
    ]
  },
  {
    "id": "timer",
    "title": "Timer",
    "challenge": "Concurrency, competing user/signal interactions, responsiveness.",
    "tasks": [
      "Build a frame containing a gauge for the elapsed time, a label which shows the elapsed time as a numerical value, a slider by which the duration of the timer can be adjusted while the timer is running and a reset button.",
      "Adjusting the slider must immediately reflect on the duration and not only when the slider is released.",
      "While moving the slider the filled amount of the gauge will (usually) change immediately.",
      "When elapsed time is bigger than duration then the timer stops (and the gauge will be full).",
      "If duration is increased such that duration becomes bigger than an elapsed time, then the timer restarts to tick until elapsed time is bigger than duration again.",
      "Clicking the reset button will reset elapsed time to zero."
    ],
    "description": [
      "Timer deals with concurrency in the sense that a timer process that updates the elapsed time runs concurrently to the user’s interactions with the GUI application. This also means that the solution to competing user and signal interactions is tested. The fact that slider adjustments must be reflected immediately moreover tests the responsiveness of the solution. A good solution will make it clear that the signal is a timer tick and, as always, has not much scaffolding.",
      "Timer is directly inspired by the timer example in the paper <a href='https://cs.brown.edu/~sk/Publications/Papers/Published/ick-adapt-oo-fwk-frp/paper.pdf' target='_blank'>Crossing State Lines: Adapting Object-Oriented Frameworks to Functional Reactive Languages</a>."
    ]
  },
  {
    "id": "crud",
    "title": "CRUD",
    "challenge": "Separating the domain and presentation logic, managing mutation, building a non-trivial layout.",
    "tasks": [
      "Build a frame containing: prefix, name and surname textfields; listbox; create, update and delete buttons",
      "Listbox presents a view of the data in the database that consists of a list of names",
      "At most one entry can be selected in listbox at a time",
      "By entering a string into the prefix textfield, the user can filter the names whose surname start with the entered prefix (this should happen immediately)",
      "Clicking the create button will append the resulting name from concatenating the strings in name and surname textfields into listbox",
      "The update and delete buttons are enabled if an entry in L is selected",
      "The update buttons will not append the resulting name but instead replace the selected entry with the new name",
      "The delete button will remove the selected entry",
      "Listbox must occupy all the remaining space"
    ],
    "description": [
      "CRUD (Create, Read, Update and Delete) represents a typical graphical business application. The primary challenge is the separation of domain and presentation logic in the source code that is more or less forced on the implementer due to the ability to filter the view by a prefix. Traditionally, some form of MVC pattern is used to achieve the separation of domain and presentation logic. Also, the approach to managing the mutation of the list of names is tested. A good solution will have a good separation between the domain and presentation logic without much overhead (e.g. in the form of toolkit specific concepts or language/paradigm concepts), a mutation management that is fast but not error-prone and a natural representation of the layout (layout builders are allowed, of course, but would increase the overhead).",
      "CRUD is directly inspired by the crud example in the blog post <a href='https://apfelmus.nfshost.com/blog/2012/03/29-frp-three-principles-bidirectional-gui.html' target='_blank'>FRP - Three principles for GUI elements with bidirectional data flow.</a>"
    ]
  },
  {
    "id": "circle-drawer",
    "title": "Circle drawer",
    "challenge": "Undo/redo, custom drawing, dialog control.",
    "tasks": [
      "Build a frame containing an undo and redo buttons and canvas area underneath",
      "Left-clicking inside an empty area inside the canvas will create an unfilled circle with a fixed diameter whose center is the left-clicked point",
      "Circles should be highlighted with gray color on hover",
      "Right-clicking the circle will make a popup menu appear with a slider inside that adjusts the diameter of the circle. Changes are applied immediately",
      "Closing the popup will mark the last selected circle as significant for the undo/redo history",
      "Clicking the undo button will undo the last significant change (i.e. circle creation or diameter adjustment)",
      "Clicking the redo button will reapply the last undoed change unless new changes were made by the user in the meantime"
    ],
    "description": [
      "Circle Drawer’s goal is, among other things, to test how good the common challenge of implementing an undo/redo functionality for a GUI application can be solved. In an ideal solution the undo/redo functionality comes for free resp. just comes out as a natural consequence of the language / toolkit / paradigm. Moreover, Circle Drawer tests how dialog control*, i.e. keeping the relevant context between several successive GUI interaction steps, is achieved in the source code. Last but not least, the ease of custom drawing is tested.",
      "Dialog control is explained in more detail in the paper <a href='https://ceur-ws.org/Vol-610/paper11.pdf' target='_blank'>Developing GUI Applications: Architectural Patterns Revisited</a> starting on page seven. The term describes the challenge of retaining context between successive GUI operations."
    ]
  },
  {
    "id": "cells",
    "title": "Cells",
    "challenge": "Change propagation, widget customization, implementing a more authentic/involved GUI application.",
    "tasks": [
      "Create a simple but usable spreadsheet application",
      "The spreadsheet should be scrollable",
      "The rows should be numbered from 0 to 99 and the columns from A to Z",
      "Double-clicking a cell lets the user change cells’s formula",
      "After having finished editing the formula is parsed and evaluated and its updated value is shown in the cell. In addition, all cells which depend on the cell must be reevaluated",
      "This process repeats until there are no more changes in the values of any cell (change propagation)",
      "One should not just recompute the value of every cell but only of those cells that depend on another cell’s changed value"
    ],
    "description": [
      "Cells is a more authentic and involved task that tests if a particular approach also scales to a somewhat bigger application. The two primary GUI-related challenges are intelligent propagation of changes and widget customization. Admittedly, there is a substantial part that is not necessarily very GUI-related but that is just the nature of a more authentic challenge. A good solution’s change propagation will not involve much effort and the customization of a widget should not prove too difficult. The domain-specific code is clearly separated from the GUI-specific code. The resulting spreadsheet widget is reusable.",
      "Cells is directly inspired by the <a href='' target='_blank'>SCells spreadsheet example</a> from the book Programming in Scala. Please refer to the book (or the implementations in this repository) for more details especially with respect to the not directly GUI-related concerns like parsing and evaluating formulas and the precise syntax and semantics of the spreadsheet language."
    ]
  }
]
